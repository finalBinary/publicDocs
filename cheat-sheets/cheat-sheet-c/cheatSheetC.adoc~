== Cheat Sheet C ==

=== Praktikums Konventionen ===
Zuerst muss natürlich das Programm angegeben werden, danach sollen die Optionen
in alphabetischer Reihenfolge (Klein-/Großschreibung nicht beachten!) genannt
werden und zum Schluss die Inputdateien in alphabetischer Reihenfolge.

Beispiel: `gcc -m32 -o program -std=c99 -Wall first.c second.c`

Erklärung: gcc als Programm zuerst, danach die Optionen (m < o < s < W),
danach die Inputdateien (f < s).

=== Mehere dateien linken ===
`gcc -o program main.o A.o B.o`

=== Unit Tests: ===

*checkmk compilieren:*

`checkmk basic_complete.ts > basic_complete.c`


*program mit tests compilieren:*

`gcc program.c program_test.c -o beispiel_tests -Wall -std=c99 -g -fprofile-arcs -ftest-coverage -pthread -lcheck -lrt -lm -lsubunit`


=== Umleitungen ===

Umleitung der Standardeingabe mit : `programm < datei`

Umleitung der Standardausgabe mit : `programm > datei`

Umleitung der Standardfehlerausgabe mit : `programm 2> datei`

Standardausgabe von Programm1 auf Standardeingabe von Programm2
umleiten: Pipe: `Programm2 | Programm1`

Datenstrom erstellen:
`FILE  *strom = fopen("datei.txt", modus)`
Die Modi sind:

- w: Write
- r: Read
- a: Attach

Datenstrom schließen: `fclose(strom);`

Sicheres Öffnen einer Datei:

[source, c]
----
FILE *in;
if (!(in = fopen("dont_exist.txt", "r"))) {
  fprintf(stderr, "Kann die Datei nicht öffnen.\n");
  return 1;
}
----

=== Grep ===

Get digits ending with comma:

`grep -oP "(\d+)(?=,)" student2.csv `

=== GDB ===

To preserve identifiers and symbols: compile with the `-g` flag

Usefule GDB commands:

- `refresh`: refresh display
- `run`
- `layout next`: see your code
- `break POINT`: set break point
- `clear main`: clear breakpoints in main
- `next` or `n`
- `continue`: to next break point
- `print VARIABLE`
- `print *arr@len`: print an array
- `watch variable`: watch variable for changes
- `step`: go into functio that is caled

